SQL lets you easily combine mult tables using a JOIN clause or ."joins"

BASIC JOINS
* When writing JOIN clause, you indicate one or more pairs of columns on which you want to join two tables. 
* The two tables will then be joined when the value in each pair maches, returning rows with data from both tables for every such case
* by default, SQL will perform an inner join. 
* this means that rws returned will have a successful join b/w the tables. if there is no match b/w the given columns, the rows will not be returned. 
* EX: join station and trip tables to return latitude and longitude for the start station for every trip along with trip ID. 
    SELECT
        trips.trip_id,
        trips.start_station,
        stations.lat,
        stations.long
    FROM
        trips 
    JOIN
        stations
    ON
        t.start_station = s.name
* join comes after FROM; they work together
* in a two table join the order does not matter
* were joining start_station oclumn of the trips table on the name column of the station
* in Select statement, were choosing four columns from the composit (joined) table



TABLE ALIASES
SELECT
    t.trip_id,
    t.start_station,
    s.lat,
    s.long
FROM
    trips t
JOIN
    stations s
ON
    trips.start_station = stations.name
    
* we follow the tables in our from and join statments with a space then a single letter and then use this shorter name to refer to the tables in our slect statment
* looks a lot like syntax we use to rename columns and works similarly by allowing you to refer to a table with another name
* you dont need to use aliases. 
* could use actual table name as we did in first ex


TYPES OF JOINS
* there are sevarl ways you could comine two tables
* SQL will by default perform an inner join (means that only rows returned are the ones where there is both a match on the left table and a match on the right table)
* because rows are only returned when there is a match on both sides, it doesnt matter which table is on the left and which is on the right
* so using JOIN = INNER JOIN

*there are other ways we could choose to join tables. 
* three types of outer joints
    1. Left outer joins: LEFT OUTER JOIN or LEFT JOIN
        * every row from left table will be included in your output (even if no mat)
        * tables read from L to R so left table is first table you name
        * rows not matched will be filled with NULL
    2. Right outer joins: RIGHT OUTER JOIN or RIGHT JOIN
        * exact same as left join excelt all rows from right are returned
    3. Full outer joins: full join or outer join
        * returns all matching records from both L and R tables. 
        * can potentially return very large datasets



CTES
* can use joins ot also join them on results of other queries
* Common Table Expression (CTE) is one common way to do it
* two basic ways to use CTW:
 1. step processing for queries (running query that is too complex for a single eecution and instead requires discrete steps)
 2. Preprocessing to facilitate a join
 
 Ex: preprocessing. when we generated avg lat and long of every city. what if we wanted to also include count of the number of trips that started in each of those cities? 

CTEs start with the form WITH _expression_ as (...)

-- Set up the CTE to create a "locations" table.
WITH
    locations
AS (
    -- A simple query to get the averages of lat and long on a city level.
    SELECT
        city,
        AVG(lat) lat,
        AVG(long) long
    FROM
        stations
    GROUP BY 1
)

-- Joining the locations table we created with the trips table to count trips.
SELECT
    l.city,
    l.lat,
    l.long,
    COUNT(*)
FROM
    locations l

-- We need an intermediate join to go from locations to stations 
-- because the trips table does not have a "city" column.
JOIN
    stations s
ON
    l.city = s.city
JOIN
    trips t
ON
    t.start_station = s.name
GROUP BY 1


CTE locations: groups stations by city name to find avg of the coordinates. you are then creating a new temporary locations table with an entry for lat and long for each city. that locations table is then joined with trips table

we cant directly join locations table, which has a city column onto the trips table because the trips table doesnt have a city column to join. in order to relate locations to trips, we must first join locations back on the stations table (which does have a city column), then join that to the trips table on the common start_tation and station name column





CASE
* allow you to set up conditions and then take action in a column based on them
* common to combine them with COUNT to do conditional counts
* most common form is:
CASE WHEN __condition__ THEN __value__ ELSE __value__ END

ex: 
SELECT
    (CASE WHEN dockcount > 20 THEN 'large' ELSE 'small' END) station_size,
    COUNT(*) as station_count
FROM 
    stations
GROUP BY 1

This CASE statement looks at the stations table and labels each row either 'large' or 'small' depending on the value of dockcount for that row, and then counts how many rows there are for each case. The group by statement makes it so we are counting based on the station size.



DRILLS
1. What are the three longest trips on rainy days?
with rainy as 
(Select 
	date
From 
	weather
Where events = 'Rain'
Group BY 1
)

select
	trip_id,
	duration,
	date(start_date) trip_date
from 
	trips
join
	rainy
on rainy.date = trip_date
order BY duration DESC
limit 3

2. Which station is full most often?
select
	status.station_id,
	stations.name,
count(case when docks_available=0 then 1 end) empty_count
from status
join stations
on stations.station_id = status.station_id
group by 1

3. Return a list of stations with a count of number of trips starting at that station but ordered by dock count.
select
	start_station, 
	dockcount, 
	count(*)
from trips
join stations
on stations.name = trips.start_station
group by 1 , 2
order by 2 desc

4. (Challenge) What's the length of the longest trip for each day it rains anywhere?
